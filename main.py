import logging
import re
import os
import time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, error
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters


from data_manager import DataManager
from notifications import NotificationManager
from knowledge_test import KnowledgeTest
from stats_manager import StatsManager
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
data_manager = DataManager("history_data.json")
notification_manager = NotificationManager(data_manager)
knowledge_test = KnowledgeTest(data_manager)
stats_manager = StatsManager()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    keyboard = [
        [KeyboardButton("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π"), KeyboardButton("üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è"), KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_state_keyboard(state: str = None) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    if state and state not in ["main_menu", None]:
        keyboard = [
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"), KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞")]
        ]
    else:
        keyboard = [
            [KeyboardButton("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π"), KeyboardButton("üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è"), KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞")]
        ]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
    data_manager.initialize_sample_data()
    
    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    main_keyboard = get_main_keyboard()
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    inline_keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π", callback_data="testing")],
        [InlineKeyboardButton("üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω", callback_data="start_marathon")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="add_data")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è", callback_data="learning")],
        [InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help_main")]
    ]
    inline_markup = InlineKeyboardMarkup(inline_keyboard)
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    welcome_message = (
        "üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–µ–ª–∞—Ä—É—Å–∏!*\n\n"
        
        "ü§ñ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n"
        "‚Ä¢ üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º, —Å–æ–±—ã—Ç–∏—è–º –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–µ—è—Ç–µ–ª—è–º\n"
        "‚Ä¢ üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚è∞ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É\n\n"
        
        "üöÄ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n"
        "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è'\n"
        "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π'\n"
        "3Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ '–ú–∞—Ä–∞—Ñ–æ–Ω' –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
        "4Ô∏è‚É£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n\n"
        
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=inline_markup,
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
    await update.message.reply_text(
        "‚ÑπÔ∏è *–í–∞–∂–Ω–æ –æ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è:* –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã "
        "–ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∞–∂–µ –≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è'.",
        parse_mode="Markdown",
        reply_markup=main_keyboard
    )

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ"""
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ—â–∏ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üìö –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã", callback_data="help_testing")],
        [InlineKeyboardButton("üèÜ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="help_marathon")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="help_notifications")],
        [InlineKeyboardButton("üìä –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π", callback_data="help_statistics")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="help_add_data")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–µ–ª–∞—Ä—É—Å–∏*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n\n"
        
        "üìö *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/test_notification - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "/check_jobs - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )
    
    await update.message.reply_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –†–∞–∑–¥–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–º–æ—â–∏ –∏ –ø–æ–∫–∞–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    query = update.callback_query
    await query.answer()
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ" –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    back_button = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data="help_main")]
    
    if query.data == "help_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–º–æ—â–∏
        return await help_command(update, context)
    
    elif query.data == "help_testing":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        keyboard = [
            [InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ", callback_data="help_test_date")],
            [InlineKeyboardButton("–ü–æ —Å–æ–±—ã—Ç–∏—é", callback_data="help_test_event")],
            [InlineKeyboardButton("–ü–æ –¥–µ—è—Ç–µ–ª—é", callback_data="help_test_figure")],
            [InlineKeyboardButton("–ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é", callback_data="help_test_achievement")],
            back_button[0]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "üìö *–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            "–í –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã 4 —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π:\n\n"
            
            "1Ô∏è‚É£ *–ü–æ –¥–∞—Ç–µ* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞—Ç–∞, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
            "2Ô∏è‚É£ *–ü–æ —Å–æ–±—ã—Ç–∏—é* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É\n"
            "3Ô∏è‚É£ *–ü–æ –¥–µ—è—Ç–µ–ª—é* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "4Ô∏è‚É£ *–ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è\n\n"
            
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
        )
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif query.data.startswith("help_test_"):
        # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É —Ç–µ—Å—Ç–∞
        test_type = query.data.replace("help_test_", "")
        reply_markup = InlineKeyboardMarkup([back_button])
        
        if test_type == "date":
            message = (
                "üìÖ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ*\n\n"
                "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: *1569*\n\n"
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —ç—Ç—É –¥–∞—Ç—É.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: *–õ—é–±–ª–∏–Ω—Å–∫–∞—è —É–Ω–∏—è. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –í–ö–õ –∏ –ü–æ–ª—å—Å–∫–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞*\n\n"
                
                "üìù *–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:*\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –±–ª–∏–∑–∫–∏–µ –ø–æ —Å–º—ã—Å–ª—É –æ—Ç–≤–µ—Ç—ã\n"
                "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º\n\n"
                
                "üí° *–°–æ–≤–µ—Ç:* –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è."
            )
        elif test_type == "event":
            message = (
                "üîç *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ–±—ã—Ç–∏—é*\n\n"
                "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "*–õ—é–±–ª–∏–Ω—Å–∫–∞—è —É–Ω–∏—è. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –í–ö–õ –∏ –ü–æ–ª—å—Å–∫–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞*\n\n"
                
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *1569*)\n\n"
                
                "üìù *–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:*\n"
                "‚Ä¢ –î–ª—è —Ç–æ—á–Ω—ã—Ö –¥–∞—Ç —É–∫–∞–∂–∏—Ç–µ –≥–æ–¥ (1569)\n"
                "‚Ä¢ –î–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (1863-1864)\n"
                "‚Ä¢ –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞\n\n"
                
                "üí° *–°–æ–≤–µ—Ç:* –°–æ—Å—Ç–∞–≤—å—Ç–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π."
            )
        elif test_type == "figure":
            message = (
                "üë§ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –¥–µ—è—Ç–µ–ª—é*\n\n"
                "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—è—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "*–§—Ä–∞–Ω—Ü–∏—Å–∫ –°–∫–æ—Ä–∏–Ω–∞*\n\n"
                
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "*–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–≤–æ–ø–µ—á–∞—Ç–Ω–∏–∫, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ë–∏–±–ª–∏–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫*\n\n"
                
                "üìù *–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:*\n"
                "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∫–ª–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –±–ª–∏–∑–∫–∏–µ –ø–æ —Å–º—ã—Å–ª—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
                "‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –≥–æ–¥—ã –∂–∏–∑–Ω–∏ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
                
                "üí° *–°–æ–≤–µ—Ç:* –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª–µ–π –ø–æ —ç–ø–æ—Ö–∞–º."
            )
        elif test_type == "achievement":
            message = (
                "üèÜ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é*\n\n"
                "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "*–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–≤–æ–ø–µ—á–∞—Ç–Ω–∏–∫, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ë–∏–±–ª–∏–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫*\n\n"
                
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–∑–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—è—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "*–§—Ä–∞–Ω—Ü–∏—Å–∫ –°–∫–æ—Ä–∏–Ω–∞*\n\n"
                
                "üìù *–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:*\n"
                "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—è—Ç–µ–ª—è\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\n"
                
                "üí° *–°–æ–≤–µ—Ç:* –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
            )
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif query.data == "help_marathon":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–∞—Ä–∞—Ñ–æ–Ω—É
        reply_markup = InlineKeyboardMarkup([back_button])
        
        message = (
            "üèÜ *–ú–∞—Ä–∞—Ñ–æ–Ω –∑–Ω–∞–Ω–∏–π*\n\n"
            "–ú–∞—Ä–∞—Ñ–æ–Ω ‚Äî —ç—Ç–æ —Å–µ—Ä–∏—è –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ. "
            "–≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.\n\n"
            
            "üìù *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—Ä–∞—Ñ–æ–Ω:*\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω'\n"
            "2. –í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Ç–∏–ø–æ–≤\n"
            "3. –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'\n"
            "4. –ü–æ—Å–ª–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
            
            "üîÑ *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
            "‚Ä¢ –ù–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à—É –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            
            "üí° *–°–æ–≤–µ—Ç:* –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
        )
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif query.data == "help_notifications":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        reply_markup = InlineKeyboardMarkup([back_button])
        
        message = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n"
            "–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º "
            "–¥–ª—è —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n\n"
            
            "üìù *–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å (1-10)\n"
            "2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–π—Ç–µ:\n"
            "   ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00)\n"
            "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"
            "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª–µ–π\n\n"
            
            "üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:*\n"
            "‚Ä¢ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /check_jobs –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /test_notification –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            
            "üí° *–°–æ–≤–µ—Ç:* –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
        )
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif query.data == "help_statistics":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        reply_markup = InlineKeyboardMarkup([back_button])
        
        message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—ã—è–≤–ª—è—Ç—å –æ–±–ª–∞—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.\n\n"
            
            "üìà *–î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±—â–∏–π –∏ –ø–æ —Ç–∏–ø–∞–º)\n"
            "‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç–µ–º—ã\n"
            "‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            
            "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
            "1. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "2. –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
            
            "üí° *–°–æ–≤–µ—Ç:* –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–ª–∞–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif query.data == "help_add_data":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
        reply_markup = InlineKeyboardMarkup([back_button])
        
        message = (
            "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª—è—è —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –∏ –¥–µ—è—Ç–µ–ª–µ–π.\n\n"
            
            "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' ‚Üí '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (1569, 1941-1944, 27 –∏—é–ª—è 1990)\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n"
            
            "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—è:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' ‚Üí '–î–æ–±–∞–≤–∏—Ç—å –¥–µ—è—Ç–µ–ª—è'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—è—Ç–µ–ª—è\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–ª–∏ –≤–∫–ª–∞–¥–∞\n\n"
            
            "üîÑ *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n\n"
            
            "üí° *–°–æ–≤–µ—Ç:* –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."
        )
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–º–æ—â—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_context_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = context.user_data.get("state")
    
    if state is None or state == "main_menu":
        await help_command(update, context)
        return
    
    # –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    help_data = ""
    if state == "testing":
        test_type = context.user_data.get("test_type")
        help_data = f"help_test_{test_type}" if test_type else "help_testing"
    elif state == "marathon":
        help_data = "help_marathon"
    elif state in ["setting_notifications_count", "setting_notification_time", "setting_events_count", "setting_figures_count"]:
        help_data = "help_notifications"
    elif state in ["adding_event_date", "adding_event_description", "adding_figure_name", "adding_figure_achievement"]:
        help_data = "help_add_data"
    else:
        await help_command(update, context)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ callback
    context.user_data["emulated_callback"] = help_data
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ callback_query
    class DummyQuery:
        def __init__(self, data):
            self.data = data
        
        async def answer(self):
            pass
        
        async def edit_message_text(self, **kwargs):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await update.message.reply_text(
                kwargs.get("text", ""),
                reply_markup=kwargs.get("reply_markup"),
                parse_mode=kwargs.get("parse_mode")
            )
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–æ–ø–∏—é update —Å –Ω–∞—à–∏–º dummy query
    update_copy = update
    update_copy.callback_query = DummyQuery(help_data)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏
    await help_callback(update_copy, context)

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
async def finish_test_with_tips(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               is_correct: bool, test_type: str, 
                               question: str, answer: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    result_message = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    result_message += f"\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{answer}*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if not is_correct:
        if test_type == "date":
            result_message += "üí° *–°–æ–≤–µ—Ç:* –°–æ—Å—Ç–∞–≤—å—Ç–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –µ—ë —Ä–µ–≥—É–ª—è—Ä–Ω–æ."
        elif test_type == "event":
            result_message += "üí° *–°–æ–≤–µ—Ç:* –°–≤—è–∑—ã–≤–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —ç–ø–æ—Ö–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        elif test_type == "figure":
            result_message += "üí° *–°–æ–≤–µ—Ç:* –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
        elif test_type == "achievement":
            result_message += "üí° *–°–æ–≤–µ—Ç:* –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="continue_testing")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="statistics")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        result_message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ç–∏–ø–∞–º callback
    if query.data == "learning":
        await start_learning(update, context)
    elif query.data == "testing":
        await start_testing(update, context)
    elif query.data == "add_data":
        await start_adding_data(update, context)
    elif query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "start_marathon":
        await start_marathon_callback(update, context)
    elif query.data == "next_marathon_question":
        await next_marathon_question_callback(update, context)
    elif query.data == "statistics":
        await show_statistics(update, context)
    elif query.data == "test_date":
        context.user_data["state"] = "testing"
        context.user_data["test_type"] = "date"
        await knowledge_test.start_date_test(update, context)
    elif query.data == "test_event":
        context.user_data["state"] = "testing"
        context.user_data["test_type"] = "event"
        await knowledge_test.start_event_test(update, context)
    elif query.data == "test_figure":
        context.user_data["state"] = "testing"
        context.user_data["test_type"] = "figure"
        await knowledge_test.start_figure_test(update, context)
    elif query.data == "test_achievement":
        context.user_data["state"] = "testing"
        context.user_data["test_type"] = "achievement"
        await knowledge_test.start_achievement_test(update, context)
    elif query.data == "continue_testing":
        await continue_testing(update, context)
    elif query.data == "add_event":
        await add_event_start(update, context)
    elif query.data == "add_figure":
        await add_figure_start(update, context)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π", callback_data="testing")],
        [InlineKeyboardButton("üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω", callback_data="start_marathon")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="add_data")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è", callback_data="learning")],
        [InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∫–Ω–æ–ø–∫–∞—Ö –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üîç *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "üîç *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ reply keyboard
    main_keyboard = get_main_keyboard()
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=main_keyboard
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["state"] = "main_menu"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
async def start_learning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è"""
    context.user_data["state"] = "setting_notifications_count"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n"
            "–°–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 3-5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n"
            "–°–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 3-5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.",
            parse_mode="Markdown"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_notification_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        notifications_count = int(update.message.text)
        if notifications_count < 1 or notifications_count > 10:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.",
                reply_markup=get_state_keyboard(context.user_data["state"])
            )
            return
        
        context.user_data["notifications_count"] = notifications_count
        context.user_data["current_notification"] = 1
        context.user_data["notifications"] = []
        context.user_data["state"] = "setting_notification_time"
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({notifications_count}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
            f"üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 1 –∏–∑ {notifications_count}.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)\n\n"
            f"üí° *–°–æ–≤–µ—Ç:* –í—ã–±–∏—Ä–∞–π—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–µ–ª–∏—Ç—å 5-10 –º–∏–Ω—É—Ç –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.",
            parse_mode="Markdown",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )

async def handle_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    time_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r"^([01]?[0-9]|2[0-3]):([0-5][0-9])$", time_text):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification = {
        "time": time_text,
        "events_count": 0,
        "figures_count": 0
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    context.user_data["notifications"].append(notification)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    context.user_data["state"] = "setting_events_count"
    
    await update.message.reply_text(
        f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {time_text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        f"–°–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å –¥–∞—Ç–∞–º–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)\n\n"
        f"üí° *–°–æ–≤–µ—Ç:* –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2-3 —Å–æ–±—ã—Ç–∏—è –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )

async def handle_events_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π"""
    try:
        events_count = int(update.message.text)
        if events_count < 0:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=get_state_keyboard(context.user_data["state"])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π
        context.user_data["notifications"][-1]["events_count"] = events_count
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data["state"] = "setting_figures_count"
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π ({events_count}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
            f"–°–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)\n\n"
            f"üí° *–°–æ–≤–µ—Ç:* –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1-2 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª—è –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑.",
            parse_mode="Markdown",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )

async def handle_figures_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—è—Ç–µ–ª–µ–π"""
    try:
        figures_count = int(update.message.text)
        if figures_count < 0:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=get_state_keyboard(context.user_data["state"])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—è—Ç–µ–ª–µ–π
        current_notification = context.user_data["current_notification"]
        notifications_count = context.user_data["notifications_count"]
        context.user_data["notifications"][-1]["figures_count"] = figures_count
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if current_notification < notifications_count:
            context.user_data["current_notification"] += 1
            context.user_data["state"] = "setting_notification_time"
            
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—è—Ç–µ–ª–µ–π ({figures_count}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
                f"üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {current_notification + 1} –∏–∑ {notifications_count}.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)",
                reply_markup=get_state_keyboard(context.user_data["state"])
            )
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await finalize_notifications_setup(update, context)
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )

async def finalize_notifications_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_id = update.effective_user.id
    notifications = context.user_data["notifications"]
    
    # –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notification_manager.replace_all_user_notifications(user_id, notifications)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await notification_manager.schedule_notifications(context)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    notification_summary = "‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
    notification_summary += "üì£ *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n"
    
    for i, notification in enumerate(notifications, 1):
        notification_summary += (
            f"*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i}:* `{notification['time']}` ‚Äì "
            f"{notification['events_count']} —Å–æ–±—ã—Ç–∏–π, "
            f"{notification['figures_count']} –¥–µ—è—Ç–µ–ª–µ–π\n"
        )
    
    notification_summary += "\n‚úÖ *–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n"
    notification_summary += "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
    notification_summary += "üí° *–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
    notification_summary += "‚Ä¢ /check_jobs ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    notification_summary += "‚Ä¢ /test_notification ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    
    keyboard = [
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    inline_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        notification_summary, 
        reply_markup=inline_markup,
        parse_mode="Markdown"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    main_keyboard = get_main_keyboard()
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=main_keyboard
    )
    
    context.user_data["state"] = None

async def test_notification_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = update.effective_user.id
    
    await update.message.reply_text(
        "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...",
        reply_markup=get_main_keyboard()
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notifications = notification_manager.get_user_notifications(user_id)
    
    if not notifications:
        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è'.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    class DummyJob:
        def __init__(self, data):
            self.data = data
            
    class DummyContext:
        def __init__(self, bot, data):
            self.bot = bot
            self.job = DummyJob(data)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    dummy_context = DummyContext(
        bot=context.bot,
        data={
            "user_id": user_id,
            "notification": notifications[0]
        }
    )
    
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        await notification_manager._send_notification(dummy_context)
        
        await update.message.reply_text(
            f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {notifications[0]['events_count']} —Å–æ–±—ã—Ç–∏–π, {notifications[0]['figures_count']} –¥–µ—è—Ç–µ–ª–µ–π\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è'.",
            reply_markup=get_main_keyboard()
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π
async def start_testing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ", callback_data="test_date")],
        [InlineKeyboardButton("–ü–æ —Å–æ–±—ã—Ç–∏—é", callback_data="test_event")],
        [InlineKeyboardButton("–ü–æ –¥–µ—è—Ç–µ–ª—é", callback_data="test_figure")],
        [InlineKeyboardButton("–ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é", callback_data="test_achievement")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "üìö *–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        "‚Ä¢ *–ü–æ –¥–∞—Ç–µ* ‚Äî –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞—Ç–∞, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "‚Ä¢ *–ü–æ —Å–æ–±—ã—Ç–∏—é* ‚Äî –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É\n"
        "‚Ä¢ *–ü–æ –¥–µ—è—Ç–µ–ª—é* ‚Äî –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ *–ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é* ‚Äî –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."
    )
    
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç"""
    if context.user_data.get("state") == "testing":
        is_correct = await knowledge_test.check_answer(update, context, stats_manager)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="continue_testing")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="statistics")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
        state_keyboard = get_state_keyboard(context.user_data["state"])
        await update.message.reply_text(
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=state_keyboard
        )

async def continue_testing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    test_type = context.user_data.get("test_type")
    
    if test_type == "date":
        await knowledge_test.start_date_test(update, context)
    elif test_type == "event":
        await knowledge_test.start_event_test(update, context)
    elif test_type == "figure":
        await knowledge_test.start_figure_test(update, context)
    elif test_type == "achievement":
        await knowledge_test.start_achievement_test(update, context)
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await start_testing(update, context)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def start_adding_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ—è—Ç–µ–ª—è", callback_data="add_figure")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª—è—è —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. "
        "–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?"
    )
    
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def add_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()
    
    context.user_data["state"] = "adding_event_date"
    
    await query.edit_message_text(
        "üìÖ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ –ì–æ–¥: 1994\n"
        "‚Ä¢ –ü–µ—Ä–∏–æ–¥: 1941-1945\n"
        "‚Ä¢ –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞: 27 –∏—é–ª—è 1990\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É —Å–æ–±—ã—Ç–∏—è.",
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )

async def handle_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    event_date = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
    context.user_data["temp_event_date"] = event_date
    context.user_data["state"] = "adding_event_description"
    
    # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    await update.message.reply_text(
        f"‚úÖ –î–∞—Ç–∞ *{event_date}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
        f"üí° *–°–æ–≤–µ—Ç:* –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã. "
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: '–õ—é–±–ª–∏–Ω—Å–∫–∞—è —É–Ω–∏—è. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –í–ö–õ –∏ –ü–æ–ª—å—Å–∫–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –≤ –†–µ—á—å –ü–æ—Å–ø–æ–ª–∏—Ç—É—é'",
        parse_mode="Markdown",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )

async def handle_event_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    event_description = update.message.text
    event_date = context.user_data["temp_event_date"]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        event_id = data_manager.add_event(event_date, event_description)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ—è—Ç–µ–ª—è", callback_data="add_figure")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
            f"‚Ä¢ *–î–∞—Ç–∞:* {event_date}\n"
            f"‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:* {event_description}\n\n"
            f"–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = get_main_keyboard()
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=main_keyboard
        )
        
        context.user_data["state"] = None
        
    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        await update.message.reply_text(
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:* {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )

async def add_figure_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    context.user_data["state"] = "adding_figure_name"
    
    await query.edit_message_text(
        "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—è—Ç–µ–ª—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—è—Ç–µ–ª—è:\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏, –∫–∞–∫ –æ–Ω–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —É—á–µ–±–Ω–∏–∫–∞—Ö. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–§—Ä–∞–Ω—Ü–∏—Å–∫ –°–∫–æ—Ä–∏–Ω–∞', '–¢–∞–¥–µ—É—à –ö–æ—Å—Ç—é—à–∫–æ'",
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )

async def handle_figure_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–µ—è—Ç–µ–ª—è"""
    figure_name = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    context.user_data["temp_figure_name"] = figure_name
    context.user_data["state"] = "adding_figure_achievement"
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—è
    await update.message.reply_text(
        f"‚úÖ –ò–º—è *{figure_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–ª–∏ –≤–∫–ª–∞–¥–∞ —ç—Ç–æ–≥–æ –¥–µ—è—Ç–µ–ª—è:\n\n"
        f"üí° *–°–æ–≤–µ—Ç:* –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é, –≥–æ–¥—ã –∂–∏–∑–Ω–∏ –∏–ª–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. "
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–≤–æ–ø–µ—á–∞—Ç–Ω–∏–∫, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ë–∏–±–ª–∏–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫'",
        parse_mode="Markdown",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )

async def handle_figure_achievement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—è"""
    figure_achievement = update.message.text
    figure_name = context.user_data["temp_figure_name"]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        figure_id = data_manager.add_figure(figure_name, figure_achievement)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ—è—Ç–µ–ª—è", callback_data="add_figure")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –¥–µ—è—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
            f"‚Ä¢ *–ò–º—è:* {figure_name}\n"
            f"‚Ä¢ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:* {figure_achievement}\n\n"
            f"–≠—Ç–æ—Ç –¥–µ—è—Ç–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = get_main_keyboard()
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=main_keyboard
        )
        
        context.user_data["state"] = None
        
    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        await update.message.reply_text(
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—è—Ç–µ–ª—è:* {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown",
            reply_markup=get_state_keyboard(context.user_data["state"])
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞
async def start_marathon_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""
    if hasattr(update, "callback_query") and update.callback_query:
        query = update.callback_query
        await query.answer()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞
        await query.edit_message_text(
            "üèÜ *–ú–∞—Ä–∞—Ñ–æ–Ω –∑–Ω–∞–Ω–∏–π*\n\n"
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–µ—Ä–∏–∏ –∏–∑ 5 —Ä–∞–∑–Ω–æ–ø–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!\n\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –æ—á–µ—Ä–µ–¥–∏\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö\n"
            "‚Ä¢ –í –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–ú–∞—Ä–∞—Ñ–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...",
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "üèÜ *–ú–∞—Ä–∞—Ñ–æ–Ω –∑–Ω–∞–Ω–∏–π*\n\n"
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–µ—Ä–∏–∏ –∏–∑ 5 —Ä–∞–∑–Ω–æ–ø–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!\n\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –æ—á–µ—Ä–µ–¥–∏\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö\n"
            "‚Ä¢ –í –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–ú–∞—Ä–∞—Ñ–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...",
            parse_mode="Markdown"
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["state"] = "marathon"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –º–∞—Ä–∞—Ñ–æ–Ω–∞:",
        reply_markup=get_state_keyboard(context.user_data["state"])
    )
    
    # –ó–∞–ø—É—Å–∫ –º–∞—Ä–∞—Ñ–æ–Ω–∞ —Å 5 –≤–æ–ø—Ä–æ—Å–∞–º–∏
    await knowledge_test.start_marathon(update, context, 5)

async def next_marathon_question_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –º–∞—Ä–∞—Ñ–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    await knowledge_test.next_marathon_question(update, context)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    stats = stats_manager.get_user_stats(user_id)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message, keyboard = format_statistics_message(stats, user_id)
    
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text(
            message, 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message, 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )

def format_statistics_message(stats: dict, user_id: int):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è* üìä\n\n"
    
    if stats['tests_total'] == 0:
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è.\n"
        message += "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –º–∞—Ä–∞—Ñ–æ–Ω—ã, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n"
        message += "üí° *–°–æ–≤–µ—Ç:* –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ."
    else:
        message += f"*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: *{stats['tests_total']}*\n"
        message += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{stats['tests_correct']}*\n"
        message += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: *{stats['accuracy']}*%\n\n"
        
        if stats['test_types']:
            message += "*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for test_type, type_stats in stats['test_types'].items():
                type_accuracy = 0
                if type_stats['total'] > 0:
                    type_accuracy = round(type_stats['correct'] / type_stats['total'] * 100, 2)
                
                type_name = ""
                if test_type == "date":
                    type_name = "–î–∞—Ç—ã"
                elif test_type == "event":
                    type_name = "–°–æ–±—ã—Ç–∏—è"
                elif test_type == "figure":
                    type_name = "–î–µ—è—Ç–µ–ª–∏"
                elif test_type == "achievement":
                    type_name = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
                
                message += f"‚Ä¢ *{type_name}*: {type_stats['correct']}/{type_stats['total']} ({type_accuracy}%)\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        difficult_questions = stats_manager.get_difficult_questions(user_id, 3)
        recent_incorrect = stats_manager.get_recently_incorrect_questions(user_id, 3)
        
        if difficult_questions or recent_incorrect:
            message += "\nüîÑ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n"
            
            if difficult_questions:
                message += "*–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n"
                for question in difficult_questions:
                    message += f"‚Ä¢ {question['question']} (—Ç–æ—á–Ω–æ—Å—Ç—å: {question['accuracy']}%)\n"
            
            if recent_incorrect:
                message += "\n*–ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏:*\n"
                for question in recent_incorrect:
                    message += f"‚Ä¢ {question['question']}\n"
            
            message += "\nüí° *–°–æ–≤–µ—Ç:* –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–µ–º–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫."
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="testing")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="start_marathon")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return message, keyboard

async def check_jobs_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    jobs = context.job_queue.get_jobs_by_name("notification")
    
    if not jobs:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è'.",
            reply_markup=get_main_keyboard()
        )
        return
    
    now = datetime.datetime.now()
    
    message = f"üìã *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({len(jobs)} —à—Ç.):*\n\n"
    
    for i, job in enumerate(jobs, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        next_run = job.next_t
        notification = job.data.get("notification", {})
        time_str = notification.get("time", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        time_diff = next_run - now if next_run > now else now - next_run
        time_diff_str = f"{time_diff.seconds // 3600} —á. {(time_diff.seconds % 3600) // 60} –º–∏–Ω."
        
        message += f"{i}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {time_str}:\n"
        message += f"   ‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {next_run.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"   ‚Ä¢ {('–ß–µ—Ä–µ–∑: ' + time_diff_str) if next_run > now else ('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: ' + time_diff_str)}\n"
        message += f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {notification.get('events_count', 0)} —Å–æ–±—ã—Ç–∏–π, {notification.get('figures_count', 0)} –¥–µ—è—Ç–µ–ª–µ–π\n\n"
    
    message += "üí° *–°–æ–≤–µ—Ç:* –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
    
    await update.message.reply_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state = context.user_data.get("state")
    message_text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
    if message_text == "‚ùì –°–ø—Ä–∞–≤–∫–∞":
        await show_context_help(update, context)
        return
    
    if message_text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ":
        await cancel_command(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Reply Keyboard
    if not state:
        if message_text == "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π":
            await start_testing(update, context)
            return
        
        elif message_text == "üèÜ –ú–∞—Ä–∞—Ñ–æ–Ω":
            await start_marathon_callback(update, context)
            return
        
        elif message_text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await show_statistics(update, context)
            return
        
        elif message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            await start_adding_data(update, context)
            return
        
        elif message_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è":
            await start_learning(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if state == "setting_notifications_count":
        await handle_notification_count(update, context)
    
    elif state == "setting_notification_time":
        await handle_notification_time(update, context)
    
    elif state == "setting_events_count":
        await handle_events_count(update, context)
    
    elif state == "setting_figures_count":
        await handle_figures_count(update, context)
    
    elif state == "testing":
        await handle_test_answer(update, context)
    
    elif state == "marathon":
        await knowledge_test.check_marathon_answer(update, context, stats_manager)
    
    elif state == "adding_event_date":
        await handle_event_date(update, context)
    
    elif state == "adding_event_description":
        await handle_event_description(update, context)
    
    elif state == "adding_figure_name":
        await handle_figure_name(update, context)
    
    elif state == "adding_figure_achievement":
        await handle_figure_achievement(update, context)
    
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
        main_keyboard = get_main_keyboard()
        
        keyboard = [
            [InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞", callback_data="help_main")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=inline_markup
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∫–Ω–æ–ø–∫–∞—Ö –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await update.message.reply_text(
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=main_keyboard
        )

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = context.user_data.get("state")
    
    if not state or state == "main_menu":
        await update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    old_state = context.user_data["state"]
    context.user_data["state"] = None
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await update.message.reply_text(
        f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        return

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–æ–≤–∞—Ä—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    from telegram.request import HTTPXRequest
    request = HTTPXRequest(
        connection_pool_size=8,
        read_timeout=30.0,
        write_timeout=30.0,
        connect_timeout=30.0,
        pool_timeout=30.0,
    )
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–µ–ª–∞—Ä—É—Å–∏...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        application = Application.builder().token(token).request(request).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel_command))
        application.add_handler(CommandHandler("test_notification", test_notification_command))
        application.add_handler(CommandHandler("check_jobs", check_jobs_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–ø—Ä–∞–≤–∫–∏
        application.add_handler(CallbackQueryHandler(help_callback, pattern="^help_"))
        
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        async def post_init(application: Application) -> None:
            try:
                await notification_manager.schedule_notifications(application)
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã!")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è post_init —Ñ—É–Ω–∫—Ü–∏–∏
        application.post_init = post_init
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            timeout=30,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            pool_timeout=30,
        )
        
    except error.NetworkError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        print("1. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ API Telegram –≤ –≤–∞—à–µ–π —Å–µ—Ç–∏")
        print("3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –µ—Å–ª–∏ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ–∑–∂–µ")
    
    except error.TimedOut as e:
        print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: {e}")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("- –£–≤–µ–ª–∏—á—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ–∑–∂–µ")
    
    except error.Unauthorized as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        print("\n–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        print("- –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
    
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print("2. –û–±–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-telegram-bot: pip install python-telegram-bot --upgrade")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
    error = context.error
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error}", exc_info=context.error)
    
    # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ update –¥–æ—Å—Ç—É–ø–µ–Ω
    if isinstance(update, Update) and update.effective_chat:
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        
        if isinstance(error, error.TimedOut):
            error_message = "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        elif isinstance(error, error.NetworkError):
            error_message = "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        elif isinstance(error, error.BadRequest):
            error_message = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"{error_message}\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
            
if __name__ == "__main__":
    main()