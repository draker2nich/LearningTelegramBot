import random
from difflib import SequenceMatcher
from typing import Dict, List, Optional, Tuple, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from data_manager import DataManager
from stats_manager import StatsManager

class KnowledgeTest:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, data_manager: DataManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –∑–Ω–∞–Ω–∏–π
        
        Args:
            data_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –¥–µ—è—Ç–µ–ª–µ–π
        """
        self.data_manager = data_manager
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        self.used_events = {}  # user_id -> [event_ids]
        self.used_figures = {}  # user_id -> [figure_ids]
    
    async def start_date_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.used_events:
            self.used_events[user_id] = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        all_events = self.data_manager.get_all_events()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        available_events = [event for event in all_events if event["id"] not in self.used_events[user_id]]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if not available_events:
            self.used_events[user_id] = []
            available_events = all_events
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        event = random.choice(available_events)
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
        self.used_events[user_id].append(event["id"])
        
        if not event:
            error_message = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            if query:
                await query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
            context.user_data["state"] = None
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data["current_test"] = {
            "type": "date",
            "event": event
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        question_message = (
            f"üìÖ *{event['date']}*\n\n"
            f"–ö–∞–∫–æ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —ç—Ç—É –¥–∞—Ç—É? –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
        )
        
        if query:
            await query.edit_message_text(
                question_message,
                parse_mode="Markdown"
            )
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=question_message,
                parse_mode="Markdown"
            )
    
    async def start_event_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.used_events:
            self.used_events[user_id] = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        all_events = self.data_manager.get_all_events()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        available_events = [event for event in all_events if event["id"] not in self.used_events[user_id]]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if not available_events:
            self.used_events[user_id] = []
            available_events = all_events
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        event = random.choice(available_events)
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
        self.used_events[user_id].append(event["id"])
        
        if not event:
            error_message = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            if query:
                await query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
            context.user_data["state"] = None
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data["current_test"] = {
            "type": "event",
            "event": event
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        question_message = (
            f"üîç *–°–æ–±—ã—Ç–∏–µ:* {event['description']}\n\n"
            f"–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É."
        )
        
        if query:
            await query.edit_message_text(
                question_message,
                parse_mode="Markdown"
            )
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=question_message,
                parse_mode="Markdown"
            )
    
    async def start_figure_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –¥–µ—è—Ç–µ–ª—é
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—è—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.used_figures:
            self.used_figures[user_id] = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—è—Ç–µ–ª–µ–π
        all_figures = self.data_manager.get_all_figures()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—è—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        available_figures = [figure for figure in all_figures if figure["id"] not in self.used_figures[user_id]]
        
        # –ï—Å–ª–∏ –≤—Å–µ –¥–µ—è—Ç–µ–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if not available_figures:
            self.used_figures[user_id] = []
            available_figures = all_figures
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ—è—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        figure = random.choice(available_figures)
        
        # –û—Ç–º–µ—á–∞–µ–º –¥–µ—è—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
        self.used_figures[user_id].append(figure["id"])
        
        if not figure:
            error_message = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª–µ–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—è—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            if query:
                await query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
            context.user_data["state"] = None
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—è—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data["current_test"] = {
            "type": "figure",
            "figure": figure
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        question_message = (
            f"üë§ *{figure['name']}*\n\n"
            f"–ß–µ–º –ø—Ä–æ—Å–ª–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –¥–µ—è—Ç–µ–ª—å? –û–ø–∏—à–∏—Ç–µ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."
        )
        
        if query:
            await query.edit_message_text(
                question_message,
                parse_mode="Markdown"
            )
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=question_message,
                parse_mode="Markdown"
            )
    
    async def start_achievement_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—è—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.used_figures:
            self.used_figures[user_id] = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—è—Ç–µ–ª–µ–π
        all_figures = self.data_manager.get_all_figures()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—è—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        available_figures = [figure for figure in all_figures if figure["id"] not in self.used_figures[user_id]]
        
        # –ï—Å–ª–∏ –≤—Å–µ –¥–µ—è—Ç–µ–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if not available_figures:
            self.used_figures[user_id] = []
            available_figures = all_figures
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ—è—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        figure = random.choice(available_figures)
        
        # –û—Ç–º–µ—á–∞–µ–º –¥–µ—è—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
        self.used_figures[user_id].append(figure["id"])
        
        if not figure:
            error_message = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—è—Ç–µ–ª–µ–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—è—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            if query:
                await query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
            context.user_data["state"] = None
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—è—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data["current_test"] = {
            "type": "achievement",
            "figure": figure
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        question_message = (
            f"üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:* {figure['achievement']}\n\n"
            f"–ö–∞–∫–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –¥–µ—è—Ç–µ–ª—å –∏–∑–≤–µ—Å—Ç–µ–Ω —ç—Ç–∏–º? –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è."
        )
        
        if query:
            await query.edit_message_text(
                question_message,
                parse_mode="Markdown"
            )
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=question_message,
                parse_mode="Markdown"
            )
    
    async def check_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, stats_manager: StatsManager) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
            stats_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        Returns:
            True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        current_test = context.user_data.get("current_test")
        
        if not current_test:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            return False
        
        user_answer = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
        if current_test["type"] == "date":
            event = current_test["event"]
            correct_answer = event["description"]
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞—Ç–µ
            similarity = self._calculate_similarity(user_answer, correct_answer)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = self._extract_keywords(correct_answer)
            keyword_match = self._check_keywords(user_answer, keywords)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –æ–±—â–µ–π —Å—Ö–æ–∂–µ—Å—Ç–∏
            is_correct = similarity >= 0.6 or keyword_match >= 0.7
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏
            result_message = self._format_date_result(is_correct, event)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_manager.add_test_result(
                user_id=user_id,
                test_type="date",
                question=f"–î–∞—Ç–∞: {event['date']}",
                is_correct=is_correct
            )
        
        elif current_test["type"] == "event":
            event = current_test["event"]
            correct_answer = event["date"]
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–∞—Ç –∏ –ø–µ—Ä–∏–æ–¥–æ–≤
            is_correct = self._check_date_answer(user_answer, correct_answer)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏
            result_message = self._format_event_result(is_correct, event)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_manager.add_test_result(
                user_id=user_id,
                test_type="event",
                question=f"–°–æ–±—ã—Ç–∏–µ: {event['description']}",
                is_correct=is_correct
            )
        
        elif current_test["type"] == "figure":
            figure = current_test["figure"]
            correct_answer = figure["achievement"]
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–µ—è—Ç–µ–ª–µ
            similarity = self._calculate_similarity(user_answer, correct_answer)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = self._extract_keywords(correct_answer)
            keyword_match = self._check_keywords(user_answer, keywords)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            is_correct = similarity >= 0.6 or keyword_match >= 0.7
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏
            result_message = self._format_figure_result(is_correct, figure)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_manager.add_test_result(
                user_id=user_id,
                test_type="figure",
                question=f"–î–µ—è—Ç–µ–ª—å: {figure['name']}",
                is_correct=is_correct
            )
        
        elif current_test["type"] == "achievement":
            figure = current_test["figure"]
            correct_answer = figure["name"]
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
            name_similarity = self._calculate_name_similarity(user_answer, correct_answer)
            is_correct = name_similarity >= 0.8
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏
            result_message = self._format_achievement_result(is_correct, figure)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_manager.add_test_result(
                user_id=user_id,
                test_type="achievement",
                question=f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {figure['achievement']}",
                is_correct=is_correct
            )
        
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞."
            )
            return False
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            result_message,
            parse_mode="Markdown"
        )
        
        return is_correct
    
    def _extract_keywords(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        for char in ".,;:!?‚Äî()-\"\'":
            text = text.replace(char, " ")
        
        # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
        words = text.split()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫)
        stop_words = ["–≤", "–Ω–∞", "–∏", "—Å", "–ø–æ", "–∞", "–æ", "—É", "–∫", "–æ—Ç", "–¥–æ", "–∏–∑", "–¥–ª—è", "–∑–∞", "–ø–æ–¥", "–Ω–∞–¥"]
        keywords = [word for word in words if len(word) > 3 and word not in stop_words]
        
        return keywords
    
    def _check_keywords(self, answer: str, keywords: List[str]) -> float:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        
        Args:
            answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            
        Returns:
            –î–æ–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–æ—Ç 0 –¥–æ 1)
        """
        if not keywords:
            return 0
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        answer = answer.lower()
        
        # –ü–æ–¥—Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        found = 0
        for keyword in keywords:
            if keyword in answer:
                found += 1
        
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        return found / len(keywords)
    
    def _check_date_answer(self, user_answer: str, correct_answer: str) -> bool:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–µ
        
        Args:
            user_answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            correct_answer: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            
        Returns:
            True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
        user_answer = user_answer.strip().lower()
        correct_answer = correct_answer.strip().lower()
        
        # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if user_answer == correct_answer:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
        if "-" in correct_answer:
            # –ü–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1941-1944)
            try:
                correct_start, correct_end = map(int, correct_answer.split("-"))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–∏–æ–¥–∞
                if user_answer.isdigit():
                    user_date = int(user_answer)
                    return correct_start <= user_date <= correct_end
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–∏–æ–¥
                if "-" in user_answer:
                    user_start, user_end = map(int, user_answer.split("-"))
                    return (user_start == correct_start and user_end == correct_end)
            except (ValueError, TypeError):
                pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –º–µ—Å—è—Ü
        if " " in correct_answer:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–¥ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            correct_parts = correct_answer.split()
            if any(part.isdigit() and part in user_answer for part in correct_parts):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–∏–∑–æ—Å—Ç—å (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≥–æ–¥–æ–≤)
        if correct_answer.isdigit() and user_answer.isdigit():
            return correct_answer == user_answer
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        return self._calculate_similarity(user_answer, correct_answer) >= 0.8
    
    def _calculate_similarity(self, str1: str, str2: str) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
        
        Args:
            str1: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            str2: –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1
        """
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        str1 = str1.lower()
        str2 = str2.lower()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ SequenceMatcher –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        return SequenceMatcher(None, str1, str2).ratio()
    
    def _calculate_name_similarity(self, user_name: str, correct_name: str) -> float:
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–º–µ–Ω
        
        Args:
            user_name: –ò–º—è, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            correct_name: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1
        """
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        user_name = user_name.lower()
        correct_name = correct_name.lower()
        
        # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if user_name == correct_name:
            return 1.0
        
        # –†–∞–∑–±–∏–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–∞ —á–∞—Å—Ç–∏ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
        user_parts = [part.strip() for part in user_name.split()]
        correct_parts = [part.strip() for part in correct_name.split()]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–µ–π –∏–º–µ–Ω–∏
        matched_parts = 0
        total_parts = len(correct_parts)
        
        for correct_part in correct_parts:
            for user_part in user_parts:
                if self._calculate_similarity(user_part, correct_part) > 0.8:
                    matched_parts += 1
                    break
        
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∏ —Å–æ–≤–ø–∞–≤—à–∏—Ö —á–∞—Å—Ç–µ–π
        return matched_parts / total_parts if total_parts > 0 else 0.0
    
    def _format_date_result(self, is_correct: bool, event: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ
        
        Args:
            is_correct: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            event: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        result += f"\n\nüìÖ *{event['date']}*: {event['description']}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
        if not is_correct:
            result += "\n\nüí° *–°–æ–≤–µ—Ç:* –î–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∞—Ç —Å–≤—è–∑—ã–≤–∞–π—Ç–µ –∏—Ö —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —ç–ø–æ—Ö–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, "
            result += "—Å–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ."
        
        return result
    
    def _format_event_result(self, is_correct: bool, event: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é
        
        Args:
            is_correct: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            event: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        result += f"\n\nüîç *–°–æ–±—ã—Ç–∏–µ:* {event['description']}\nüìÖ *–î–∞—Ç–∞:* {event['date']}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
        if not is_correct:
            result += "\n\nüí° *–°–æ–≤–µ—Ç:* –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–∏–æ–¥–∞–º –∏ –∏–∑—É—á–∞–π—Ç–µ –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ "
            result += "–ø—Ä–∏—á–∏–Ω –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∞—Ç."
        
        return result
    
    def _format_figure_result(self, is_correct: bool, figure: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –¥–µ—è—Ç–µ–ª—é
        
        Args:
            is_correct: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            figure: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—è—Ç–µ–ª–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        result += f"\n\nüë§ *{figure['name']}*: {figure['achievement']}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
        if not is_correct:
            result += "\n\nüí° *–°–æ–≤–µ—Ç:* –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –º–µ–∂–¥—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—è—Ç–µ–ª—è–º–∏ "
            result += "–∏ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏, –≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –∏—Ö –ø–æ —Å—Ñ–µ—Ä–∞–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —ç–ø–æ—Ö–∞–º."
        
        return result
    
    def _format_achievement_result(self, is_correct: bool, figure: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
        
        Args:
            is_correct: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            figure: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—è—Ç–µ–ª–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        result += f"\n\nüèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:* {figure['achievement']}\nüë§ *–î–µ—è—Ç–µ–ª—å:* {figure['name']}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
        if not is_correct:
            result += "\n\nüí° *–°–æ–≤–µ—Ç:* –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –≥–¥–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –∞ –Ω–∞ –¥—Ä—É–≥–æ–π ‚Äî –∏–º—è –¥–µ—è—Ç–µ–ª—è. "
            result += "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å, –≤—Å–ø–æ–º–∏–Ω–∞—è –∏–º—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç."
        
        return result
    
    async def start_marathon(self, update: Update, context: ContextTypes.DEFAULT_TYPE, questions_count: int = 5) -> None:
        """
        –ù–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞ (—Å–µ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤)
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
            questions_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞
        context.user_data["marathon"] = {
            "questions_count": questions_count,
            "current_question": 0,
            "correct_answers": 0,
            "questions": [],
            "history": []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        question_types = ["date", "event", "figure", "achievement"]
        questions = []
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –≤—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã
        base_questions = question_types.copy()
        random.shuffle(base_questions)
        questions.extend(base_questions)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while len(questions) < questions_count:
            questions.append(random.choice(question_types))
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        questions = questions[:questions_count]
        random.shuffle(questions)
        
        context.user_data["marathon"]["questions"] = questions
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await self.next_marathon_question(update, context)
    
    async def next_marathon_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –º–∞—Ä–∞—Ñ–æ–Ω–∞
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
        """
        marathon = context.user_data.get("marathon")
        
        if not marathon:
            # –ï—Å–ª–∏ –º–∞—Ä–∞—Ñ–æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "‚ö†Ô∏è –ú–∞—Ä–∞—Ñ–æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
                )
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ú–∞—Ä–∞—Ñ–æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –º–∞—Ä–∞—Ñ–æ–Ω
        current_question = marathon["current_question"]
        if current_question >= marathon["questions_count"]:
            # –ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
            await self.finish_marathon(update, context)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        question_type = marathon["questions"][current_question]
        context.user_data["state"] = "marathon"
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_message = (
            f"üèÜ *–ú–∞—Ä–∞—Ñ–æ–Ω: –≤–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {marathon['questions_count']}*\n\n"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                progress_message,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                progress_message,
                parse_mode="Markdown"
            )
        
        # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        if question_type == "date":
            await self.start_date_test(update, context)
        elif question_type == "event":
            await self.start_event_test(update, context)
        elif question_type == "figure":
            await self.start_figure_test(update, context)
        elif question_type == "achievement":
            await self.start_achievement_test(update, context)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        marathon["current_question"] += 1
    
    async def check_marathon_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, stats_manager: StatsManager) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
            stats_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        is_correct = await self.check_answer(update, context, stats_manager)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        current_test = context.user_data.get("current_test")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ
        if current_test:
            question_info = {
                "type": current_test["type"],
                "is_correct": is_correct
            }
            
            if current_test["type"] in ["date", "event"]:
                question_info["content"] = current_test["event"]
            else:
                question_info["content"] = current_test["figure"]
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ä–∞—Ñ–æ–Ω–∞
            context.user_data["marathon"]["history"].append(question_info)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if is_correct:
            context.user_data["marathon"]["correct_answers"] += 1
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        keyboard = [
            [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_marathon_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –º–∞—Ä–∞—Ñ–æ–Ω–∞.",
            reply_markup=reply_markup
        )
    
    async def finish_marathon(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
        """
        marathon = context.user_data["marathon"]
        correct_answers = marathon["correct_answers"]
        total_questions = marathon["questions_count"]
        accuracy = round(correct_answers / total_questions * 100, 2)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = (
            f"üèÅ *–ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{correct_answers} –∏–∑ {total_questions}* ({accuracy}%)\n\n"
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        if marathon.get("history"):
            result_message += "*–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞:*\n"
            
            for i, question in enumerate(marathon["history"], 1):
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
                type_name = ""
                if question["type"] == "date":
                    type_name = "–î–∞—Ç–∞"
                    question_text = question["content"]["date"]
                    answer_text = question["content"]["description"]
                elif question["type"] == "event":
                    type_name = "–°–æ–±—ã—Ç–∏–µ"
                    question_text = question["content"]["description"]
                    answer_text = question["content"]["date"]
                elif question["type"] == "figure":
                    type_name = "–î–µ—è—Ç–µ–ª—å"
                    question_text = question["content"]["name"]
                    answer_text = question["content"]["achievement"]
                elif question["type"] == "achievement":
                    type_name = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
                    question_text = question["content"]["achievement"]
                    answer_text = question["content"]["name"]
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ
                result_message += f"{i}. {type_name}: "
                result_message += f"{question_text[:30]}{'...' if len(question_text) > 30 else ''} "
                result_message += "‚úÖ" if question["is_correct"] else "‚ùå"
                result_message += "\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if accuracy < 50:
            result_message += "\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* –í–∞–º —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —É–¥–µ–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∏–∑—É—á–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞. "
            result_message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        elif accuracy < 70:
            result_message += "\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* –ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å. "
            result_message += "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–µ—Ö —Ç–∏–ø–∞—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –≥–¥–µ —É –≤–∞—Å –±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫."
        else:
            result_message += "\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ "
            result_message += "–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π."
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("–ù–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="start_marathon")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="statistics")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                result_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=result_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–∞
        context.user_data["marathon"] = None
        context.user_data["state"] = None